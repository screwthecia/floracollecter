// File: js/scenes/GameScene.js
import { ALL_FLORA_DATA, getFloraForWorld } from '../FloraData.js';
export const COLLECTOR_LEVELS = [ {name:"Flower Newbie I",xpThreshold:0},{name:"Flower Newbie II",xpThreshold:100},{name:"Flower Newbie III",xpThreshold:250},{name:"Flora Pro I",xpThreshold:500},{name:"Flora Pro II",xpThreshold:800},{name:"Flora Pro III",xpThreshold:1200},{name:"Flora Enthusiast I",xpThreshold:1700},{name:"Flora Enthusiast II",xpThreshold:2300},{name:"Flora Enthusiast III",xpThreshold:3000}];

export default class GameScene extends Phaser.Scene {
    constructor() { super({ key: 'GameScene' }); this.player = null; this.keys = {}; this.map = null; this.worldNameText = null; this.groundLayer = null; this.TILE_SIZE = 32; this.MAP_WIDTH_TILES = 75; this.MAP_HEIGHT_TILES = 90; this.flowersInWorldData = {}; this.flowerSpritesGroup = null; this.activeFlowerSprites = []; this.floraTooltip = null; this.collectedFloraTimers = []; this.maxActiveFlowers = 80; this.inventory = {}; this.inventorySlots = 15; this.maxStack = 30; this.isInventoryOpen = false; this.isSellerOpen = false; this.isPauseMenuOpen = false; this.hotbarSlots = 5; this.hotbar = []; this.hotbarUI = { group: null, slots: [], icons: [], counts: [] }; this.selectedItem = null; this.placingFlower = null; this.placementIndicator = null; this.pointerJustClickedUI = false; this.unlockedBiomes = ['main']; this.playerCurrency = 0; this.currencyText = null; this.biomeRegions = {}; this.playerXP = 0; this.playerLevel = 0; this.playerLevelName = COLLECTOR_LEVELS[0].name; this.xpToNextLevel = COLLECTOR_LEVELS[1]?.xpThreshold || Infinity; this.levelText = null; this.biomeBarriers = { upper: null, lower: null }; this.barrierMessageText = null; this.loadedSaveData = null; this.saveToSlotOnStart = null; }
    init(data) { this.worldName = data.worldName || 'Default World'; this.isNewGame = data.isNewGame === undefined ? true : data.isNewGame; this.saveToSlotOnStart = data.saveToSlotOnStart || null; this.inventory = {}; this.collectedFloraTimers = []; this.activeFlowerSprites = []; this.flowersInWorldData = {}; this.keys = {}; this.isInventoryOpen = false; this.isSellerOpen = false; this.isPauseMenuOpen = false; this.hotbar = new Array(this.hotbarSlots).fill(null); this.selectedItem = null; this.placingFlower = null; this.unlockedBiomes = ['main']; this.playerCurrency = 100; this.playerXP = 0; this.playerLevel = 0; this.playerLevelName = COLLECTOR_LEVELS[0].name; this.xpToNextLevel = COLLECTOR_LEVELS[1]?.xpThreshold || Infinity; this.loadedSaveData = null; if(data.loadSlotKey&&!this.isNewGame){console.log("GS init: Load from",data.loadSlotKey);const lDS=localStorage.getItem(data.loadSlotKey);if(lDS){try{this.loadedSaveData=JSON.parse(lDS);this.isNewGame=false;this.worldName=this.loadedSaveData.worldName||this.worldName;console.log("GS init: Parsed save from",data.loadSlotKey);}catch(e){console.error("GS init: Err parse save:",e);this.loadedSaveData=null;this.isNewGame=true;}}else{console.warn("GS init: No save for key:",data.loadSlotKey);this.isNewGame=true;}} console.log(`GS init: isNewGame=${this.isNewGame}. WN=${this.worldName}`); }
    preload() { console.log('GameScene: preload'); }
    create() {
        console.log('GameScene: create. isNewGame:', this.isNewGame);
        try{this.keys.W=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);this.keys.A=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);this.keys.S=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);this.keys.D=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);this.keys.E=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);this.keys.O=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.O);this.keys.ESC=this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ESC);}catch(e){console.error("Key creation ex:",e);}
        this.defineBiomeRegions(); this.createWorldMap();
        let iPX=this.biomeRegions.main.x+this.biomeRegions.main.width/2; let iPY=this.biomeRegions.main.y+this.biomeRegions.main.height/2;
        if(!this.isNewGame&&this.loadedSaveData&&this.loadedSaveData.player){iPX=this.loadedSaveData.player.x;iPY=this.loadedSaveData.player.y;}
        this.player=this.physics.add.sprite(iPX,iPY,'player_placeholder').setCollideWorldBounds(true).setDepth(1);
        this.cameras.main.setBounds(0,0,this.map.widthInPixels,this.map.heightInPixels).startFollow(this.player,true,0.08,0.08);
        this.flowerSpritesGroup=this.physics.add.group();
        if(!this.isNewGame&&this.loadedSaveData){this.applyLoadedData(this.loadedSaveData);}else{this.spawnInitialFlora();if(this.saveToSlotOnStart){this.triggerSave(this.saveToSlotOnStart);this.saveToSlotOnStart=null;}}
        this.setupUI();this.updateLevelText();this.updateCurrencyText();this.refreshHotbarDisplay();
        this.setupBiomeBarriersAndMessages();this.setupInteractions(); console.log('GameScene setup complete.');
        this.events.on(Phaser.Scenes.Events.RESUME,this.onSceneResume,this);this.events.on(Phaser.Scenes.Events.PAUSE,this.onScenePause,this);this.events.on(Phaser.Scenes.Events.SHUTDOWN,this.onSceneShutdown,this);
    }
    defineBiomeRegions(){const mW=this.MAP_WIDTH_TILES*this.TILE_SIZE,mH=this.MAP_HEIGHT_TILES*this.TILE_SIZE,tH=Math.floor(this.MAP_HEIGHT_TILES/3)*this.TILE_SIZE;this.biomeRegions.upper={x:0,y:0,width:mW,height:tH,name:'upper',grassKey:'grass_alpine_0',floraSpawnCount:12,levelToUnlock:3};this.biomeRegions.main={x:0,y:tH,width:mW,height:tH,name:'main',grassKeyBase:'Grass',floraSpawnCount:15,levelToUnlock:0};this.biomeRegions.lower={x:0,y:tH*2,width:mW,height:mH-(tH*2),name:'lower',grassKey:'grass_grotto_0',floraSpawnCount:12,levelToUnlock:6};}
    createWorldMap(){this.map=this.make.tilemap({tileWidth:this.TILE_SIZE,tileHeight:this.TILE_SIZE,width:this.MAP_WIDTH_TILES,height:this.MAP_HEIGHT_TILES});const tsM0=this.map.addTilesetImage('ts_grass0','Grass0',this.TILE_SIZE,this.TILE_SIZE,0,0,1);const tsM1=this.map.addTilesetImage('ts_grass1','Grass1',this.TILE_SIZE,this.TILE_SIZE,0,0,2);const tsM2=this.map.addTilesetImage('ts_grass2','Grass2',this.TILE_SIZE,this.TILE_SIZE,0,0,3);const tsUp=this.map.addTilesetImage('ts_alpine','grass_alpine_0',this.TILE_SIZE,this.TILE_SIZE,0,0,4);const tsLow=this.map.addTilesetImage('ts_grotto','grass_grotto_0',this.TILE_SIZE,this.TILE_SIZE,0,0,5);if(!tsM0||!tsM1||!tsM2||!tsUp||!tsLow){console.error("GrassTS fail");return;}this.groundLayer=this.map.createBlankLayer('GroundZero',[tsM0,tsM1,tsM2,tsUp,tsLow],0,0,this.MAP_WIDTH_TILES,this.MAP_HEIGHT_TILES);if(!this.groundLayer){console.error("GroundL fail");this.cameras.main.setBackgroundColor('#F00');return;}this.cameras.main.setBackgroundColor('#000');this.fillBiomeRegion(this.biomeRegions.upper,tsUp.firstgid);this.fillBiomeRegionMain(this.biomeRegions.main,[tsM0.firstgid,tsM1.firstgid,tsM2.firstgid]);this.fillBiomeRegion(this.biomeRegions.lower,tsLow.firstgid);this.physics.world.setBounds(0,0,this.map.widthInPixels,this.map.heightInPixels);}
    fillBiomeRegion(r,tI){const sX=Math.floor(r.x/this.TILE_SIZE),sY=Math.floor(r.y/this.TILE_SIZE),nW=Math.floor(r.width/this.TILE_SIZE),nH=Math.floor(r.height/this.TILE_SIZE);this.map.fill(tI,sX,sY,nW,nH,true,'GroundZero');}
    fillBiomeRegionMain(r,gids){const sX=Math.floor(r.x/this.TILE_SIZE),sY=Math.floor(r.y/this.TILE_SIZE),nW=Math.floor(r.width/this.TILE_SIZE),nH=Math.floor(r.height/this.TILE_SIZE);for(let y=0;y<nH;y++)for(let x=0;x<nW;x++){const R=Math.random();let tG;if(R<0.7)tG=gids[0];else if(R<0.95)tG=gids[2];else tG=gids[1];this.map.putTileAt(tG,sX+x,sY+y,true,'GroundZero');}}
    spawnInitialFlora(){for(const bN in this.biomeRegions){if(this.unlockedBiomes.includes(bN)){this.spawnFloraForBiomeRegion(this.biomeRegions[bN],this.biomeRegions[bN].floraSpawnCount);}}}
    spawnFloraForBiomeRegion(r,nTS){const fS=getFloraForWorld(ALL_FLORA_DATA,r.name,nTS,this.unlockedBiomes);this.flowersInWorldData[r.name]=fS;let fPT=Phaser.Math.Between(2,3);if(r.name==='upper')fPT=Phaser.Math.Between(3,5);else if(r.name==='lower')fPT=Phaser.Math.Between(2,4);for(const fId in fS){const fD=fS[fId];for(let i=0;i<fPT;i++){this.spawnSingleFlower(fD,false,r);}}}
    setupUI(){this.worldNameText=this.add.text(10,10,`W: ${this.worldName}`,{font:'14px Arial',fill:'#FFF',backgroundColor:'rgba(0,0,0,0.5)',padding:{x:5,y:3}}).setScrollFactor(0).setDepth(30);this.currencyText=this.add.text(this.cameras.main.width-10,10,`$: ${this.playerCurrency}`,{font:'16px Arial',fill:'#FFD700',backgroundColor:'rgba(0,0,0,0.5)',padding:{x:5,y:3}}).setOrigin(1,0).setScrollFactor(0).setDepth(30);this.levelText=this.add.text(10,35,`Lvl: ${this.playerLevelName} (XP: ${this.playerXP}/${this.xpToNextLevel})`,{font:'14px Arial',fill:'#A0D0A0',backgroundColor:'rgba(0,0,0,0.5)',padding:{x:5,y:3}}).setScrollFactor(0).setDepth(30);this.floraTooltip=this.add.text(0,0,'',{font:'14px Arial',fill:'#000',backgroundColor:'rgba(255,255,224,0.95)',padding:{x:10,y:6},borderRadius:5,wordWrap:{width:220,useAdvancedWrap:true}}).setDepth(40).setVisible(false).setScrollFactor(0);const hCS=56,hP=8,hTW=(hCS*this.hotbarSlots)+(hP*(this.hotbarSlots-1)),hSX=(this.cameras.main.width-hTW)/2,hY=this.cameras.main.height-hCS-hP*2;this.hotbarUI.group=this.add.group();this.hotbarUI.slots=[];this.hotbarUI.icons=[];this.hotbarUI.counts=[];for(let i=0;i<this.hotbarSlots;i++){const x=hSX+i*(hCS+hP);const sB=this.add.rectangle(x,hY,hCS,hCS,0x2d2010,0.8).setOrigin(0,0).setStrokeStyle(2,0x6a553b).setScrollFactor(0).setDepth(19);this.hotbarUI.group.add(sB);this.hotbarUI.slots.push(sB);const ic=this.add.sprite(x+hCS/2,hY+hCS/2,'').setVisible(false).setScrollFactor(0).setDepth(20);this.hotbarUI.group.add(ic);this.hotbarUI.icons.push(ic);const cT=this.add.text(x+hCS-5,hY+hCS-5,'',{font:'16px Arial',fill:'#fff',stroke:'#000',strokeThickness:3,align:'right'}).setOrigin(1,1).setVisible(false).setScrollFactor(0).setDepth(21);this.hotbarUI.group.add(cT);this.hotbarUI.counts.push(cT);sB.setData('slotIndex',i).setInteractive({useHandCursor:true});sB.on(Phaser.Input.Events.POINTER_DOWN,(ptr)=>{if(ptr.leftButtonDown()){this.pointerJustClickedUI=true;this.handleHotbarClick(i);}}); }this.refreshHotbarDisplay();}
    setupBiomeBarriersAndMessages(){const mapPW=this.MAP_WIDTH_TILES*this.TILE_SIZE;const bT=this.TILE_SIZE/4;const bC=0xff0000;const bA=0.25;if(this.biomeBarriers.upper)this.biomeBarriers.upper.destroy();if(this.biomeBarriers.lower)this.biomeBarriers.lower.destroy();this.biomeBarriers.upper=null;this.biomeBarriers.lower=null;if(!this.unlockedBiomes.includes('upper')&&this.biomeRegions.upper){const r=this.biomeRegions.upper;this.biomeBarriers.upper=this.add.rectangle(r.x+r.width/2,r.y+r.height-bT/2,r.width,bT,bC,bA).setDepth(0.8);}if(!this.unlockedBiomes.includes('lower')&&this.biomeRegions.lower){const r=this.biomeRegions.lower;this.biomeBarriers.lower=this.add.rectangle(r.x+r.width/2,r.y+bT/2,r.width,bT,bC,bA).setDepth(0.8);}if(!this.barrierMessageText||!this.barrierMessageText.scene){this.barrierMessageText=this.add.text(this.cameras.main.width/2,60,"",{font:'18px Arial',fill:'#ffaaaa',backgroundColor:'rgba(50,0,0,0.8)',padding:{x:10,y:5},align:'center',wordWrap:{width:this.cameras.main.width*0.7}}).setOrigin(0.5,0).setScrollFactor(0).setDepth(50).setVisible(false);}}
    setupInteractions(){this.input.on(Phaser.Input.Events.GAMEOBJECT_OVER,(p,go)=>{if(!this.isInventoryOpen&&!this.isSellerOpen&&!this.isPauseMenuOpen&&this.flowerSpritesGroup?.contains(go)){const d=go.getData('floraDetails');if(d){let x=p.x+20,y=p.y+20;if(x+this.floraTooltip.width>this.cameras.main.width-10)x=p.x-20-this.floraTooltip.width;if(y+this.floraTooltip.height>this.cameras.main.height-10)y=p.y-20-this.floraTooltip.height;this.floraTooltip.setText(`${d.name}\n\n${d.story}`).setPosition(x,y).setVisible(true);go.setTint(0xDDDD00);}}});this.input.on(Phaser.Input.Events.GAMEOBJECT_OUT,(p,go)=>{if(this.flowerSpritesGroup?.contains(go)){this.floraTooltip.setVisible(false);go.clearTint();}});this.input.on(Phaser.Input.Events.GAMEOBJECT_DOWN,this.handleGameObjectDown,this);this.input.on(Phaser.Input.Events.POINTER_DOWN,this.handleGlobalPointerDown,this);}
    handleGameObjectDown(p,go){this.pointerJustClickedUI=true;if(!this.isInventoryOpen&&!this.isSellerOpen&&!this.isPauseMenuOpen&&p.leftButtonDown()&&this.flowerSpritesGroup?.contains(go)){const d=go.getData('floraDetails');if(!d)return;this.collectFlora(d.id,d.name);this.gainXP(d.xpValue||1);let rDM=1;if(d.biome==='upper')rDM=1.5;if(d.biome==='lower')rDM=0.7;const bRM=Phaser.Math.Between(2,5);const rDMs=bRM*60*1000*rDM;this.collectedFloraTimers.push({floraId:d.id,biome:d.biome,regrowTime:this.time.now+rDMs});this.activeFlowerSprites=this.activeFlowerSprites.filter(f=>f!==go);this.flowerSpritesGroup.remove(go,true,true);this.floraTooltip.setVisible(false);}}
    handleGlobalPointerDown(p){if(this.isInventoryOpen||this.isSellerOpen||this.isPauseMenuOpen)return;if(this.placingFlower&&p.leftButtonDown()){if(this.pointerJustClickedUI){this.pointerJustClickedUI=false;return;}this.tryPlaceFlower(p.worldX,p.worldY);}else if(p.rightButtonDown()&&this.placingFlower){this.cancelFlowerPlacement();}this.pointerJustClickedUI=false;}
    update(time,delta){if(!this.player||!this.player.body||!this.keys.W)return;if(!this.isInventoryOpen&&!this.isSellerOpen&&!this.isPauseMenuOpen){let xV=0,yV=0;const spd=180;if(this.input.keyboard.keys[Phaser.Input.Keyboard.KeyCodes.A]?.isDown)xV=-spd;else if(this.input.keyboard.keys[Phaser.Input.Keyboard.KeyCodes.D]?.isDown)xV=spd;if(this.input.keyboard.keys[Phaser.Input.Keyboard.KeyCodes.W]?.isDown)yV=-spd;else if(this.input.keyboard.keys[Phaser.Input.Keyboard.KeyCodes.S]?.isDown)yV=spd;this.player.setVelocity(xV,yV);if(xV!==0&&yV!==0)this.player.body.velocity.normalize().scale(spd);}else{this.player.setVelocity(0);}this.checkFlowerRegrowth(time);if(this.placingFlower&&this.placementIndicator){const ptr=this.input.activePointer;this.placementIndicator.setPosition(ptr.worldX,ptr.worldY).setVisible(true);}else if(this.placementIndicator?.visible){this.placementIndicator.setVisible(false);}this.checkBiomeAccess();if(Phaser.Input.Keyboard.JustDown(this.keys.E)){const iS=this.scene.get('InventoryScene');if(!this.isInventoryOpen){if(!this.isSellerOpen&&!this.isPauseMenuOpen&&!this.scene.isActive('InventoryScene')&&(!iS||!iS.sys.isTransitioning())){this.isInventoryOpen=true;this.cancelFlowerPlacement();this.scene.launch('InventoryScene',{inventory:this.inventory,hotbar:this.hotbar,gameScene:this});this.scene.bringToTop('InventoryScene');}}else{if(this.scene.isActive('InventoryScene')&&iS){iS.closeInventory();}}}if(Phaser.Input.Keyboard.JustDown(this.keys.O)){const sS=this.scene.get('SellerScene');if(!this.isSellerOpen){if(!this.isInventoryOpen&&!this.isPauseMenuOpen&&!this.scene.isActive('SellerScene')&&(!sS||!sS.sys.isTransitioning())){this.isSellerOpen=true;this.cancelFlowerPlacement();this.scene.launch('SellerScene',{inventory:this.inventory,hotbar:this.hotbar,playerCurrency:this.playerCurrency,playerLevel:this.playerLevel,playerLevelName:this.playerLevelName,gameScene:this});this.scene.bringToTop('SellerScene');}}else{if(this.scene.isActive('SellerScene')&&sS){sS.closeSeller();}}}if(Phaser.Input.Keyboard.JustDown(this.keys.ESC)){const pS=this.scene.get('PauseMenuScene');if(!this.isPauseMenuOpen){if(!this.isInventoryOpen&&!this.isSellerOpen&&!this.scene.isActive('PauseMenuScene')&&(!pS||!pS.sys.isTransitioning())){this.isPauseMenuOpen=true;this.cancelFlowerPlacement();this.scene.pause('GameScene');this.scene.launch('PauseMenuScene',{gameScene:this});this.scene.bringToTop('PauseMenuScene');}}else{if(this.scene.isActive('PauseMenuScene')&&pS){pS.resumeGame();}}}}
    onScenePause(){console.log("GS Paused by system");if(this.player&&this.player.body)this.player.setVelocity(0);}
    onSceneResume(){this.isPauseMenuOpen=false;console.log("GS Resumed by system");if(this.keys){if(this.keys.W)this.keys.W.reset();if(this.keys.A)this.keys.A.reset();if(this.keys.S)this.keys.S.reset();if(this.keys.D)this.keys.D.reset();if(this.keys.E){this.keys.E.isDown=false;this.keys.E.reset();}if(this.keys.O){this.keys.O.isDown=false;this.keys.O.reset();}}}
    onSceneShutdown(){console.log("GS Shutting Down");this.events.off(Phaser.Scenes.Events.RESUME,this.onSceneResume,this);this.events.off(Phaser.Scenes.Events.PAUSE,this.onScenePause,this);this.events.off(Phaser.Scenes.Events.SHUTDOWN,this.onSceneShutdown,this);}
    checkBiomeAccess(){if(!this.player||!this.barrierMessageText||!this.barrierMessageText.scene)return;let showMsg=false;let msg="";const buffer=this.TILE_SIZE/2;if(!this.unlockedBiomes.includes('upper')&&this.player.y<this.biomeRegions.main.y){if(this.player.y<this.biomeRegions.main.y-buffer){this.player.y=this.biomeRegions.main.y-buffer+1;this.player.setVelocityY(Math.max(0,this.player.body.velocity.y));}const reqLvlIdx=this.biomeRegions.upper.levelToUnlock;msg=`Alpine Highlands locked!\n(Requires: ${COLLECTOR_LEVELS[reqLvlIdx]?.name||'Lvl '+reqLvlIdx})`;showMsg=true;}else if(!this.unlockedBiomes.includes('lower')&&this.player.y>this.biomeRegions.lower.y){if(this.player.y>this.biomeRegions.lower.y+buffer-1){this.player.y=this.biomeRegions.lower.y+buffer-1;this.player.setVelocityY(Math.min(0,this.player.body.velocity.y));}const reqLvlIdx=this.biomeRegions.lower.levelToUnlock;msg=`Sunken Grotto locked!\n(Requires: ${COLLECTOR_LEVELS[reqLvlIdx]?.name||'Lvl '+reqLvlIdx})`;showMsg=true;}if(showMsg){this.barrierMessageText.setText(msg).setVisible(true);}else if(this.barrierMessageText.visible){this.barrierMessageText.setVisible(false);}}
    unlockBiome(bN){if(!this.unlockedBiomes.includes(bN)&&this.biomeRegions[bN]){const bTU=this.biomeRegions[bN];const reqLvl=bTU.levelToUnlock||0;if(this.playerLevel<reqLvl){alert(`You need to be ${COLLECTOR_LEVELS[reqLvl]?.name||'Lvl '+reqLvl} to enter ${bTU.name}!`);return false;}this.unlockedBiomes.push(bN);console.log(`%c${bN.toUpperCase()} BIOME UNLOCKED!`,"color:lime;font-weight:bold;");if(this.biomeBarriers[bN]){this.biomeBarriers[bN].destroy();this.biomeBarriers[bN]=null;}this.spawnFloraForBiomeRegion(bTU,bTU.floraSpawnCount);this.triggerSave(1);return true;}else{return false;}}
    attemptAutoUnlockBiomes(){let newlyUnlocked=false;for(const bN in this.biomeRegions){if(!this.unlockedBiomes.includes(bN)){const bTU=this.biomeRegions[bN];if(this.playerLevel>=bTU.levelToUnlock){this.unlockedBiomes.push(bN);console.log(`%c${bN.toUpperCase()} BIOME AUTO-UNLOCKED!`,"color:lime;font-weight:bold;");if(this.biomeBarriers[bN]){this.biomeBarriers[bN].destroy();this.biomeBarriers[bN]=null;}this.spawnFloraForBiomeRegion(bTU,bTU.floraSpawnCount);newlyUnlocked=true;}}}if(newlyUnlocked)alert("New areas have opened up due to your expertise!");}
    gainXP(amt){if(this.playerLevel>=COLLECTOR_LEVELS.length-1)return;this.playerXP+=amt;this.checkForLevelUp();this.updateLevelText();}
    checkForLevelUp(){if(this.playerLevel>=COLLECTOR_LEVELS.length-1)return false;const nLD=COLLECTOR_LEVELS[this.playerLevel+1];if(nLD&&this.playerXP>=nLD.xpThreshold){this.playerLevel++;this.playerLevelName=COLLECTOR_LEVELS[this.playerLevel].name;this.xpToNextLevel=(this.playerLevel<COLLECTOR_LEVELS.length-1)?COLLECTOR_LEVELS[this.playerLevel+1].xpThreshold:Infinity;console.log(`%cLEVEL UP! ${this.playerLevelName}`,"color:green;font-weight:bold;");this.attemptAutoUnlockBiomes();this.checkForLevelUp();return true;}return false;}
    updateLevelText(){if(this.levelText&&this.levelText.scene){let nXP=this.xpToNextLevel===Infinity?"MAX":this.xpToNextLevel;this.levelText.setText(`Lvl: ${this.playerLevelName} (XP: ${this.playerXP}/${nXP})`);}}
    updateCurrencyText(){if(this.currencyText&&this.currencyText.scene)this.currencyText.setText(`$: ${this.playerCurrency}`);}
    updatePlayerCurrency(newAmt){this.playerCurrency=newAmt;this.updateCurrencyText();}
    addItemFromPurchase(fId,cnt=1){const fN=ALL_FLORA_DATA[fId]?.name||"?";for(let c=0;c<cnt;c++){let addHB=false;for(let i=0;i<this.hotbar.length;i++){if(this.hotbar[i]&&this.hotbar[i].floraId===fId&&this.hotbar[i].count<this.maxStack){this.hotbar[i].count++;addHB=true;break;}}if(addHB){this.refreshHotbarDisplay();continue;}for(let i=0;i<this.hotbar.length;i++){if(this.hotbar[i]===null){this.hotbar[i]={floraId:fId,count:1};addHB=true;break;}}if(addHB){this.refreshHotbarDisplay();continue;}this.addItemToMainInventory(fId,fN);}}
    inventoryClosed(){this.isInventoryOpen=false;if(this.selectedItem){this.clearSelectionVisuals();this.selectedItem=null;}}
    sellerClosed(){this.isSellerOpen=false;if(this.selectedItem){this.clearSelectionVisuals();this.selectedItem=null;}}
    pauseMenuClosed(){this.isPauseMenuOpen=false;}
    collectFlora(fId,fN='?F'){if(!ALL_FLORA_DATA[fId])return;for(let i=0;i<this.hotbar.length;i++){if(this.hotbar[i]&&this.hotbar[i].floraId===fId&&this.hotbar[i].count<this.maxStack){this.hotbar[i].count++;this.refreshHotbarDisplay();this.updateInventorySceneIfNeeded();return;}}for(let i=0;i<this.hotbar.length;i++){if(this.hotbar[i]===null){this.hotbar[i]={floraId:fId,count:1};this.refreshHotbarDisplay();this.updateInventorySceneIfNeeded();return;}}this.addItemToMainInventory(fId,fN);this.updateInventorySceneIfNeeded();}
    addItemToMainInventory(fId,fN){if(this.inventory[fId]){if(this.inventory[fId]<this.maxStack)this.inventory[fId]++;else console.log(`InvStkFull ${fN}`);}else{if(Object.keys(this.inventory).length<this.inventorySlots)this.inventory[fId]=1;else{console.log(`InvFullTypes ${fN}`);alert(`InvFull ${fN}!`);}}}
    updateInventorySceneIfNeeded(){if(this.isInventoryOpen&&this.scene.isActive('InventoryScene')){const iS=this.scene.get('InventoryScene');if(iS)iS.refreshDisplay(this.inventory,this.hotbar);}}
    refreshHotbarDisplay(){if(!this.hotbarUI.icons||!this.hotbarUI.icons.length)return;for(let i=0;i<this.hotbarSlots;i++){const hI=this.hotbar[i];const iS=this.hotbarUI.icons[i];const cT=this.hotbarUI.counts[i];if(hI&&ALL_FLORA_DATA[hI.floraId]){const fMD=ALL_FLORA_DATA[hI.floraId];iS.setTexture(fMD.imageKey).setDisplaySize(48,48).setVisible(true);cT.setText(hI.count>1?`${hI.count}`:'').setVisible(hI.count>0);}else{iS.setVisible(false);cT.setVisible(false);}}}
    handleHotbarClick(sIdx){this.pointerJustClickedUI=true;this.clearSelectionVisuals();if(this.isInventoryOpen){const cHI=this.hotbar[sIdx]?{...this.hotbar[sIdx]}:null;if(this.selectedItem){if(this.selectedItem.from==='inventory'){const iTM={...this.selectedItem};if(this.inventory[iTM.floraId]){delete this.inventory[iTM.floraId];}if(cHI){this.addItemToMainInventory(cHI.floraId,ALL_FLORA_DATA[cHI.floraId]?.name);}this.hotbar[sIdx]={floraId:iTM.floraId,count:iTM.count};}else if(this.selectedItem.from==='hotbar'){if(this.selectedItem.originalIndex===sIdx){this.selectedItem=null;this.refreshHotbarDisplay();this.hotbarUI.slots[sIdx]?.setStrokeStyle(2,0x6a553b);return;}this.hotbar[sIdx]=this.selectedItem;this.hotbar[this.selectedItem.originalIndex]=cHI;}this.selectedItem=null;}else{if(cHI){this.selectedItem={...cHI,from:'hotbar',originalIndex:sIdx};this.hotbarUI.slots[sIdx]?.setStrokeStyle(3,0xFFFF00,1);}}this.refreshHotbarDisplay();this.updateInventorySceneIfNeeded();}else{const hI=this.hotbar[sIdx];if(hI){if(this.placingFlower&&this.placingFlower.floraId===hI.floraId){this.cancelFlowerPlacement();}else{this.placingFlower={floraId:hI.floraId,imageKey:ALL_FLORA_DATA[hI.floraId]?.imageKey};this.hotbarUI.slots[sIdx]?.setStrokeStyle(3,0x00FF00,1);if(!this.placementIndicator){this.placementIndicator=this.add.sprite(0,0,this.placingFlower.imageKey).setAlpha(0.6).setDepth(0.4).setVisible(false);}else{this.placementIndicator.setTexture(this.placingFlower.imageKey).setVisible(false);}}}else{this.cancelFlowerPlacement();}}}
    clearSelectionVisuals(){this.hotbarUI.slots.forEach(sBG=>sBG?.setStrokeStyle(2,0x6a553b));if(this.isInventoryOpen&&this.scene.isActive('InventoryScene')){const iS=this.scene.get('InventoryScene');if(iS)iS.clearSelectionVisuals();}if(this.isSellerOpen&&this.scene.isActive('SellerScene')){const sS=this.scene.get('SellerScene');if(sS)sS.clearSelectionVisuals?.();}}
    tryPlaceFlower(wX,wY){if(!this.placingFlower||!this.placingFlower.floraId){this.cancelFlowerPlacement();return;}const fDTP=ALL_FLORA_DATA[this.placingFlower.floraId];if(!fDTP){this.cancelFlowerPlacement();return;}let cBPI='main';for(const bN in this.biomeRegions){const r=this.biomeRegions[bN];if(wX>=r.x&&wX<r.x+r.width&&wY>=r.y&&wY<r.y+r.height){cBPI=bN;break;}}if(!this.unlockedBiomes.includes(cBPI)){console.log(`Cannot place in locked ${cBPI}`);this.cancelFlowerPlacement();return;}const pFS=this.spawnSingleFlower(fDTP,false,this.biomeRegions[cBPI]);if(pFS){pFS.setPosition(wX,wY);let fHB=false;for(let i=0;i<this.hotbar.length;i++){if(this.hotbar[i]&&this.hotbar[i].floraId===this.placingFlower.floraId){this.hotbar[i].count--;if(this.hotbar[i].count<=0)this.hotbar[i]=null;this.refreshHotbarDisplay();fHB=true;break;}}if(!fHB)console.warn("Placed flower not in hotbar!");this.cancelFlowerPlacement();}else console.log("Could not place (spawn fail).");}
    cancelFlowerPlacement(){if(this.placingFlower){this.placingFlower=null;if(this.placementIndicator)this.placementIndicator.setVisible(false);this.clearSelectionVisuals();}}
    checkFlowerRegrowth(cT){if(this.activeFlowerSprites.length>=this.maxActiveFlowers)return;for(let i=this.collectedFloraTimers.length-1;i>=0;i--){const tE=this.collectedFloraTimers[i];if(cT>=tE.regrowTime){const fTR=ALL_FLORA_DATA[tE.floraId];if(fTR){const tBR=this.biomeRegions[tE.biome]||this.biomeRegions.main;this.spawnSingleFlower(fTR,true,tBR);}this.collectedFloraTimers.splice(i,1);if(this.activeFlowerSprites.length>=this.maxActiveFlowers)break;}}}
    spawnSingleFlower(flowerData,isRegrowth=false,targetBiomeRegion=null){if(!flowerData||!flowerData.imageKey){console.warn(`spawnSF: Invalid fD/imgKey ${flowerData?.id}`);return null;}if(this.activeFlowerSprites.length>=this.maxActiveFlowers&&isRegrowth){this.collectedFloraTimers.push({floraId:flowerData.id,biome:targetBiomeRegion?.name||flowerData.biome,regrowTime:this.time.now+Phaser.Math.Between(15000,30000)});return null;}let sA;const pad=this.TILE_SIZE/2;if(targetBiomeRegion&&this.biomeRegions[targetBiomeRegion.name]){const r=this.biomeRegions[targetBiomeRegion.name];sA={x:r.x+pad,y:r.y+pad,width:Math.max(0,r.width-pad*2),height:Math.max(0,r.height-pad*2)};}else{const mR=this.biomeRegions.main;sA={x:mR.x+pad,y:mR.y+pad,width:Math.max(0,mR.width-pad*2),height:Math.max(0,mR.height-pad*2)};if(!targetBiomeRegion)console.warn(`spawnSF: targetBiomeRegion null, defaulting main.`);}if(sA.width<=0||sA.height<=0){if(isRegrowth){this.collectedFloraTimers.push({floraId:flowerData.id,biome:targetBiomeRegion?.name||flowerData.biome,regrowTime:this.time.now+Phaser.Math.Between(30000,60000)}); }console.warn("Spawn area small for biome:",targetBiomeRegion?.name);return null;}let sX,sY,vP=false,att=0;const maxAtt=50;while(!vP&&att<maxAtt){sX=Phaser.Math.Between(sA.x,sA.x+sA.width);sY=Phaser.Math.Between(sA.y,sA.y+sA.height);let tC=false;for(const sF of this.activeFlowerSprites){if(Phaser.Math.Distance.Between(sX,sY,sF.x,sF.y)<this.TILE_SIZE*1.5){tC=true;break;}}if(!tC)vP=true;att++;}if(vP){try{const fS=this.flowerSpritesGroup.create(sX,sY,flowerData.imageKey);fS.setData('floraDetails',flowerData);fS.setInteractive(new Phaser.Geom.Rectangle(0,0,fS.width,fS.height),Phaser.Geom.Rectangle.Contains);fS.setDepth(0.5);this.activeFlowerSprites.push(fS);if(isRegrowth){fS.setScale(0.1);this.tweens.add({targets:fS,scaleX:1,scaleY:1,ease:'Power2',duration:700});}return fS;}catch(e){console.error(`Err creating sprite ${flowerData.imageKey}:`,e);return null;}}else{if(isRegrowth){this.collectedFloraTimers.push({floraId:flowerData.id,biome:targetBiomeRegion?.name||flowerData.biome,regrowTime:this.time.now+Phaser.Math.Between(30000,60000)});}return null;}}
    sellItemFromPlayer(fId,fromLoc,hbIdx=-1){const fD=ALL_FLORA_DATA[fId];if(!fD){return false;}const pr=fD.basePrice;let sold=false;if(fromLoc==='hotbar'&&hbIdx>-1&&this.hotbar[hbIdx]?.floraId===fId){if(this.hotbar[hbIdx].count>0){this.hotbar[hbIdx].count--;if(this.hotbar[hbIdx].count===0)this.hotbar[hbIdx]=null;sold=true;}}else if(this.inventory[fId]&&this.inventory[fId]>0){this.inventory[fId]--;if(this.inventory[fId]===0){delete this.inventory[fId];for(let i=0;i<this.hotbar.length;i++){if(this.hotbar[i]&&this.hotbar[i].floraId===fId&&(!this.inventory[fId]||this.inventory[fId]===0)){this.hotbar[i]=null;}}}sold=true;}if(sold){this.playerCurrency+=pr;this.updateCurrencyText();this.refreshHotbarDisplay();return true;}return false;}
    playerBuysItem(fIdTB){const fD=ALL_FLORA_DATA[fIdTB];if(!fD)return false;if(this.playerCurrency>=fD.basePrice){this.playerCurrency-=fD.basePrice;this.updateCurrencyText();this.addItemFromPurchase(fIdTB,1);return true;}return false;}
    triggerSave(slotNumber=1){console.log(`GS: save slot ${slotNumber}.`);const sD={worldName:this.worldName,player:{x:this.player.x,y:this.player.y},inventory:{...this.inventory},hotbar:JSON.parse(JSON.stringify(this.hotbar)),collectedFloraTimers:JSON.parse(JSON.stringify(this.collectedFloraTimers.map(t=>({...t,regrowTime:t.regrowTime-this.time.now})))),activeFlowerSprites:this.activeFlowerSprites.filter(s=>s&&s.active&&s.getData('floraDetails')).map(s=>({floraId:s.getData('floraDetails').id,x:s.x,y:s.y,biome:s.getData('floraDetails').biome})),unlockedBiomes:[...this.unlockedBiomes],playerXP:this.playerXP,playerLevel:this.playerLevel,playerCurrency:this.playerCurrency,timestamp:new Date().toISOString()};try{localStorage.setItem(`floraCollector_saveSlot_${slotNumber}`,JSON.stringify(sD));console.log(`Saved slot ${slotNumber}!`);return true;}catch(e){console.error("Err saving:",e);return false;}}
    applyLoadedData(loadedData){console.log("Applying loaded data:",loadedData);this.worldName=loadedData.worldName||"Loaded World";this.inventory={...(loadedData.inventory||{})};this.hotbar=JSON.parse(JSON.stringify(loadedData.hotbar||new Array(this.hotbarSlots).fill(null)));this.collectedFloraTimers=(loadedData.collectedFloraTimers||[]).map(t=>({...t,regrowTime:this.time.now+t.regrowTime}));this.unlockedBiomes=[...(loadedData.unlockedBiomes||['main'])];this.playerXP=loadedData.playerXP||0;this.playerLevel=loadedData.playerLevel||0;this.playerLevelName=COLLECTOR_LEVELS[this.playerLevel]?.name||COLLECTOR_LEVELS[0].name;this.xpToNextLevel=(this.playerLevel<COLLECTOR_LEVELS.length-1)?COLLECTOR_LEVELS[this.playerLevel+1]?.xpThreshold:Infinity;this.playerCurrency=loadedData.playerCurrency||0;this.activeFlowerSprites.forEach(s=>s.destroy());this.activeFlowerSprites=[];if(this.flowerSpritesGroup)this.flowerSpritesGroup.clear(true,true);else this.flowerSpritesGroup=this.physics.add.group();(loadedData.activeFlowerSprites||[]).forEach(sF=>{const fMD=ALL_FLORA_DATA[sF.floraId];if(fMD){const r=this.biomeRegions[sF.biome]||this.biomeRegions.main;const spr=this.spawnSingleFlower(fMD,false,r);if(spr){spr.setPosition(sF.x,sF.y);}}});if(this.player&&loadedData.player){this.player.setPosition(loadedData.player.x,loadedData.player.y);}console.log("Applied loaded data. UI will refresh in create.");this.attemptAutoUnlockBiomes(); /* Check if loaded level unlocks biomes */}
}
